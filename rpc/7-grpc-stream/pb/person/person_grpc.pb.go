// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: person/person.proto

package person

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModelTestServiceClient is the client API for ModelTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelTestServiceClient interface {
	SimpleModel(ctx context.Context, in *StreamReq, opts ...grpc.CallOption) (*StreamReq, error)
	ClientStreamModel(ctx context.Context, opts ...grpc.CallOption) (ModelTestService_ClientStreamModelClient, error)
	ServerStreamModel(ctx context.Context, in *StreamReq, opts ...grpc.CallOption) (ModelTestService_ServerStreamModelClient, error)
	DoubleStreamModel(ctx context.Context, opts ...grpc.CallOption) (ModelTestService_DoubleStreamModelClient, error)
}

type modelTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelTestServiceClient(cc grpc.ClientConnInterface) ModelTestServiceClient {
	return &modelTestServiceClient{cc}
}

func (c *modelTestServiceClient) SimpleModel(ctx context.Context, in *StreamReq, opts ...grpc.CallOption) (*StreamReq, error) {
	out := new(StreamReq)
	err := c.cc.Invoke(ctx, "/person.ModelTestService/SimpleModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelTestServiceClient) ClientStreamModel(ctx context.Context, opts ...grpc.CallOption) (ModelTestService_ClientStreamModelClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelTestService_ServiceDesc.Streams[0], "/person.ModelTestService/ClientStreamModel", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelTestServiceClientStreamModelClient{stream}
	return x, nil
}

type ModelTestService_ClientStreamModelClient interface {
	Send(*StreamReq) error
	CloseAndRecv() (*StreamReq, error)
	grpc.ClientStream
}

type modelTestServiceClientStreamModelClient struct {
	grpc.ClientStream
}

func (x *modelTestServiceClientStreamModelClient) Send(m *StreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelTestServiceClientStreamModelClient) CloseAndRecv() (*StreamReq, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamReq)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelTestServiceClient) ServerStreamModel(ctx context.Context, in *StreamReq, opts ...grpc.CallOption) (ModelTestService_ServerStreamModelClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelTestService_ServiceDesc.Streams[1], "/person.ModelTestService/ServerStreamModel", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelTestServiceServerStreamModelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ModelTestService_ServerStreamModelClient interface {
	Recv() (*StreamResp, error)
	grpc.ClientStream
}

type modelTestServiceServerStreamModelClient struct {
	grpc.ClientStream
}

func (x *modelTestServiceServerStreamModelClient) Recv() (*StreamResp, error) {
	m := new(StreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelTestServiceClient) DoubleStreamModel(ctx context.Context, opts ...grpc.CallOption) (ModelTestService_DoubleStreamModelClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelTestService_ServiceDesc.Streams[2], "/person.ModelTestService/DoubleStreamModel", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelTestServiceDoubleStreamModelClient{stream}
	return x, nil
}

type ModelTestService_DoubleStreamModelClient interface {
	Send(*StreamReq) error
	Recv() (*StreamReq, error)
	grpc.ClientStream
}

type modelTestServiceDoubleStreamModelClient struct {
	grpc.ClientStream
}

func (x *modelTestServiceDoubleStreamModelClient) Send(m *StreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelTestServiceDoubleStreamModelClient) Recv() (*StreamReq, error) {
	m := new(StreamReq)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ModelTestServiceServer is the server API for ModelTestService service.
// All implementations must embed UnimplementedModelTestServiceServer
// for forward compatibility
type ModelTestServiceServer interface {
	SimpleModel(context.Context, *StreamReq) (*StreamReq, error)
	ClientStreamModel(ModelTestService_ClientStreamModelServer) error
	ServerStreamModel(*StreamReq, ModelTestService_ServerStreamModelServer) error
	DoubleStreamModel(ModelTestService_DoubleStreamModelServer) error
	mustEmbedUnimplementedModelTestServiceServer()
}

// UnimplementedModelTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModelTestServiceServer struct {
}

func (UnimplementedModelTestServiceServer) SimpleModel(context.Context, *StreamReq) (*StreamReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleModel not implemented")
}
func (UnimplementedModelTestServiceServer) ClientStreamModel(ModelTestService_ClientStreamModelServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamModel not implemented")
}
func (UnimplementedModelTestServiceServer) ServerStreamModel(*StreamReq, ModelTestService_ServerStreamModelServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamModel not implemented")
}
func (UnimplementedModelTestServiceServer) DoubleStreamModel(ModelTestService_DoubleStreamModelServer) error {
	return status.Errorf(codes.Unimplemented, "method DoubleStreamModel not implemented")
}
func (UnimplementedModelTestServiceServer) mustEmbedUnimplementedModelTestServiceServer() {}

// UnsafeModelTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelTestServiceServer will
// result in compilation errors.
type UnsafeModelTestServiceServer interface {
	mustEmbedUnimplementedModelTestServiceServer()
}

func RegisterModelTestServiceServer(s grpc.ServiceRegistrar, srv ModelTestServiceServer) {
	s.RegisterService(&ModelTestService_ServiceDesc, srv)
}

func _ModelTestService_SimpleModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelTestServiceServer).SimpleModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.ModelTestService/SimpleModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelTestServiceServer).SimpleModel(ctx, req.(*StreamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelTestService_ClientStreamModel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelTestServiceServer).ClientStreamModel(&modelTestServiceClientStreamModelServer{stream})
}

type ModelTestService_ClientStreamModelServer interface {
	SendAndClose(*StreamReq) error
	Recv() (*StreamReq, error)
	grpc.ServerStream
}

type modelTestServiceClientStreamModelServer struct {
	grpc.ServerStream
}

func (x *modelTestServiceClientStreamModelServer) SendAndClose(m *StreamReq) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelTestServiceClientStreamModelServer) Recv() (*StreamReq, error) {
	m := new(StreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ModelTestService_ServerStreamModel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModelTestServiceServer).ServerStreamModel(m, &modelTestServiceServerStreamModelServer{stream})
}

type ModelTestService_ServerStreamModelServer interface {
	Send(*StreamResp) error
	grpc.ServerStream
}

type modelTestServiceServerStreamModelServer struct {
	grpc.ServerStream
}

func (x *modelTestServiceServerStreamModelServer) Send(m *StreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func _ModelTestService_DoubleStreamModel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelTestServiceServer).DoubleStreamModel(&modelTestServiceDoubleStreamModelServer{stream})
}

type ModelTestService_DoubleStreamModelServer interface {
	Send(*StreamReq) error
	Recv() (*StreamReq, error)
	grpc.ServerStream
}

type modelTestServiceDoubleStreamModelServer struct {
	grpc.ServerStream
}

func (x *modelTestServiceDoubleStreamModelServer) Send(m *StreamReq) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelTestServiceDoubleStreamModelServer) Recv() (*StreamReq, error) {
	m := new(StreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ModelTestService_ServiceDesc is the grpc.ServiceDesc for ModelTestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelTestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "person.ModelTestService",
	HandlerType: (*ModelTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleModel",
			Handler:    _ModelTestService_SimpleModel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreamModel",
			Handler:       _ModelTestService_ClientStreamModel_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreamModel",
			Handler:       _ModelTestService_ServerStreamModel_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DoubleStreamModel",
			Handler:       _ModelTestService_DoubleStreamModel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "person/person.proto",
}
